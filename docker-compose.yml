version: "3.9"

services:
  database:
    image: mysql:8.0
    container_name: t4y-database
    env_file:
      - ./backend/.env
    ports:
    - 3306:3306

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: t4y-backend
    volumes:
      - ./backend:/backend
    restart: on-failure
    ports:
      - 8000:8000
    depends_on:
      - database
    environment:
      - DB_HOST=t4y-database
      - DB_NAME=mydatabase
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
    command: sh -c "/wait &  python manage.py makemigrations common
      && python manage.py migrate common
      && python manage.py makemigrations image
      && python manage.py migrate image
      && python manage.py runserver 0.0.0.0:8000"
    tty: true
#    env_file:
#      - ./backend/.env
    # environment:
    #   - MYSQL_ROOT_PASSWORD=rootpassword
    #   - MYSQL_DATABASE=${mydatabase}
    #   - MYSQL_USER=myuser
    #   - MYSQL_PASSWORD=mypassword

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: root
    volumes:
      - ./prometheus/config/:/etc/prometheus/
      - ./prometheus/prometheus-volume:/prometheus
    ports:
      - 9090:9090
    command: # web.enalbe-lifecycle은 api 재시작없이 설정파일들을 reload 할 수 있게 해줌
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - promnet

  grafana:
      image: grafana/grafana
      container_name: grafana
      # user: "$GRA_UID:$GRA_GID"
      ports:
        - 3000:3000
      volumes:
        - ./grafana/grafana-volume:/var/lib/grafana
      restart: always
      networks:
        - promnet


networks:
  promnet:
    driver: bridge





  rabbitmq:
    hostname: t4yhost
    container_name: rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    env_file:
      - backend/.env
    ports:
      - 5672:5672 # Default Port
      - 15672:15672 # For UI=
    depends_on:
      - backend

  celery_worker:
    container_name: celery_worker
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: "celery multi start 6 -A backend_project.celery worker --loglevel=info --pool=solo"
    depends_on:
      - rabbitmq
      - backend


    # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: t4y-frontend
  #   ports:
  #     - "3000:3000" # 포트 매핑 설정
  #   volumes:
  #     - ./frontend:/frontend