version: "3"
# docker compose -f docker-compose.prod.yml up --build
services:
  frontend:
    build: ./frontend
    command: sh -c "npm install && npm run build && npm start"
    container_name: frontend
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    stdin_open: true
    tty: true
    networks:
      - t4y

  backend1:
    container_name: backend1
    build:
      context: ./backend

    command : gunicorn backend_project.wsgi --preload --bind 0.0.0.0:8000 --timeout 240
    restart: on-failure
    ports:
      - 8001:8001
    volumes:
      - ./backend:/backend
      - static_volume:/backend/staticfiles
    expose:
      - 8001
    networks:
      - t4y
  backend2:
    container_name: backend2
    build:
      context: ./backend

    command: gunicorn backend_project.wsgi --preload --bind 0.0.0.0:8000 --timeout 240
    restart: on-failure
    ports:
      - 8002:8002
    volumes:
      - ./backend:/backend
      - static_volume:/backend/staticfiles
    expose:
      - 8002
    networks:
      - t4y
  backend3:
    container_name: backend3
    build:
      context: ./backend

    command: gunicorn backend_project.wsgi --preload --bind 0.0.0.0:8000 --timeout 240
    restart: on-failure
    ports:
      - 8003:8003
    volumes:
      - ./backend:/backend
      - static_volume:/backend/staticfiles
    expose:
      - 8003
    networks:
      - t4y

  backend4:
    container_name: backend4
    build:
      context: ./backend

    command: gunicorn backend_project.wsgi --preload --bind 0.0.0.0:8000 --timeout 240
    restart: on-failure
    ports:
      - 8004:8004
    volumes:
      - ./backend:/backend
      - static_volume:/backend/staticfiles
    expose:
      - 8004
    networks:
      - t4y
  rabbitmq:
    hostname: t4yhost
    container_name: rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    env_file:
      - backend/.env
    ports:
      - 5672:5672 # Default Port
      - 15672:15672 # For UI=
    volumes:
      - ./backend:/backend
    depends_on:
      - backend1
      - backend2
      - backend3
      - backend4
    networks:
      - t4y

  celery4:
    container_name: celery4
    build:
      context: ./backend
    restart : unless-stopped
    command: "celery -A backend_project.celery worker --loglevel=info --pool=gevent --concurrency=12"
    depends_on:
      - rabbitmq
      - backend1
      - backend2
      - backend3
      - backend4
    volumes:
      - ./backend:/backend
    networks:
      - t4y
  celery3:
    container_name: celery3
    build:
      context: ./backend
    restart: unless-stopped
    command: "celery -A backend_project.celery worker --loglevel=info --pool=gevent --concurrency=12"
    depends_on:
      - rabbitmq
      - backend1
      - backend2
      - backend3
      - backend4
    volumes:
      - ./backend:/backend
    networks:
      - t4y
  celery2:
    container_name: celery1
    build:
      context: ./backend
    restart: unless-stopped
    command: "celery -A backend_project.celery worker --loglevel=info --pool=gevent --concurrency=12"
    depends_on:
      - rabbitmq
      - backend1
      - backend2
      - backend3
      - backend4
    volumes:
      - ./backend:/backend
    networks:
      - t4y
  celery1:
    container_name: celery1
    build:
      context: ./backend
    restart: unless-stopped
    command: "celery -A backend_project.celery worker --loglevel=info --pool=gevent --concurrency=12"
    depends_on:
      - rabbitmq
      - backend1
      - backend2
      - backend3
      - backend4
    volumes:
      - ./backend:/backend
    networks:
      - t4y

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    expose:
      - 80
      - 443
    restart: unless-stopped
    volumes:
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
      - build_folder:/var/www/frontend
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend1
      - backend2
      - backend3
      - backend4
    # 가상 네트워크 연결
    networks:
      - t4y
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot: #certbot
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  t4y:
    driver: bridge

volumes:
  static_volume: null
  media_volume: null
  build_folder: null