version: "3"

services:

  fronted:
    build: ./frontend
    command: sh -c "npm install && npm start"
    container_name: fronted
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    stdin_open: true
    tty: true
    networks:
      - t4y
  database:
    image: mysql:8.0
    container_name: t4y-database
    env_file:
      - ./backend/.env_monitor
    ports:
      - 3306:3306
    networks:
      - t4y

  backend:
    container_name: backend
    build:
      context: ./backend

    command : gunicorn backend_project.wsgi --preload --bind 0.0.0.0:8000 --timeout 240
    restart: on-failure
    ports:
      - 8000:8000
    volumes:
      - ./backend:/backend
      - static_volume:/backend/staticfiles
    expose:
      - 8000
    networks:
      - t4y

  rabbitmq:
    hostname: t4yhost
    container_name: rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    env_file:
      - backend/.env
    ports:
      - 5672:5672 # Default Port
      - 15672:15672 # For UI=
    volumes:
      - ./backend:/backend
    depends_on:
      - backend
    networks:
      - t4y

  celery:
    container_name: celery
    build:
      context: ./backend
    restart : unless-stopped
    command: "celery -A backend_project.celery worker --loglevel=info --pool=gevent --concurrency=12"
    depends_on:
      - rabbitmq
      - backend
    volumes:
      - ./backend:/backend
    networks:
      - t4y

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 80:8080
    restart: unless-stopped
    volumes:
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
      - build_folder:/var/www/frontend
    depends_on:
      - backend
    # 가상 네트워크 연결
    networks:
      - t4y

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: root
    volumes:
      - ./prometheus/config/:/etc/prometheus/
      - ./prometheus/prometheus-volume:/prometheus
    ports:
      - 9090:9090
    command: # web.enalbe-lifecycle은 api 재시작없이 설정파일들을 reload 할 수 있게 해줌
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    depends_on:
      - backend
    networks:
      - t4y

  grafana:
      image: grafana/grafana-oss:latest
      container_name: grafana
      user: root
      environment:
        GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      ports:
        - 3300:3000
      volumes:
        - ./grafana/grafana-volume/datasource:/var/lib/grafana/datasource
        - ./grafana/grafana-volume:/var/lib/grafana
      restart: always
      depends_on:
        - prometheus
      networks:
        - t4y
  mysqld_exporter:
    container_name: mysqld_exporter
    image: prom/mysqld-exporter
    volumes:
      - ./.my.cnf:/etc/.my.cnf
    command:
      - '--collect.global_status'
      - '--collect.engine_innodb_status'
      - '--collect.global_variables'
      - '--collect.info_schema.innodb_metrics'
      - '--collect.info_schema.processlist'
      - '--collect.info_schema.tables'
      - '--collect.info_schema.query_response_time'
      - '--web.listen-address=0.0.0.0:9104'
      - '--web.telemetry-path=/metrics'
      - '--config.my-cnf=/etc/.my.cnf'
    restart: always
    ports:
      - 9104:9104
    depends_on:
      - database
    networks:
      - t4y

#volumes:
#  grafana-data:

networks:
  t4y:
    driver: bridge

volumes:
  static_volume: null
  media_volume: null
  build_folder: null